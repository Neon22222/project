// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  username      String   @unique
  email         String?  @unique
  password      String
  walletAddress String?
  plan          PlanType
  trianglePosition Int?
  triangleId    String?  @db.ObjectId
  trianglePositions Position[] @relation(name: "UserToPositions")
  referralCode  String   @unique
  uplineId      String?  @db.ObjectId
  upline        User?    @relation("UserReferrals", fields: [uplineId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  downlines     User[]   @relation("UserReferrals")
  balance       Float    @default(0)
  totalEarned   Float    @default(0)
  isAdmin       Boolean  @default(false)
  isActive      Boolean  @default(true)
  loginAttempts Int      @default(0)
  lockedUntil   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  // Relations
  transactions  Transaction[]
  notifications Notification[]
  triangle      Triangle?     @relation(fields: [triangleId], references: [id])

  @@map("users")
}

model Triangle {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  planType        PlanType
  userPositions   Json      // Array of user IDs or null for empty positions
  completedAt     DateTime?
  payoutProcessed Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  users User[]
  trianglePositions Position[] @relation(name: "PositionToTriangle")

  @@map("triangles")
}

model Transaction {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  userId        String            @db.ObjectId
  type          TransactionType
  amount        Float
  status        TransactionStatus @default(PENDING)
  transactionId String?           @unique // External transaction ID
  description   String?
  metadata      Json?             // Additional transaction data
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  expiresAt     DateTime?
  confirmedAt   DateTime?
  rejectedAt    DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Plan {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          PlanType @unique
  price         Float
  payout        Float
  referralBonus Float
  description   String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("plans")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AdminSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     String
  type      String   // "string", "number", "boolean", "json"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_settings")
}

// Enums
enum PlanType {
  King
  Queen
  Bishop
  Knight
}

enum TransactionType {
  DEPOSIT
  PAYOUT
  REFERRAL
  BONUS
  REFUND
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  REJECTED
  COMPLETED
  EXPIRED
  CANCELLED
}

enum NotificationType {
  SUCCESS
  WARNING
  ERROR
  INFO
}

// Add Position model if it doesn't exist
model Position {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  triangleId String  @db.ObjectId
  position  Int
  user      User     @relation(fields: [userId], references: [id], name: "UserToPositions")
  triangle  Triangle @relation(fields: [triangleId], references: [id], name: "PositionToTriangle")

  @@map("positions")
}
